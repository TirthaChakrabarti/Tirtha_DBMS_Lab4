CREATE DATABASE E_COMMERCE;

USE E_COMMERCE;

CREATE TABLE SUPPLIER (
    SUPP_ID INT,
    SUPP_NAME VARCHAR(30) NOT NULL,
    SUPP_CITY VARCHAR(20) NOT NULL,
    SUPP_PHONE VARCHAR(10) NOT NULL,
    PRIMARY KEY (SUPP_ID)
);

CREATE TABLE CUSTOMER (
    CUS_ID INT,
    CUS_NAME VARCHAR(30) NOT NULL,
    CUS_PHONE VARCHAR(10) NOT NULL,
    CUS_CITY VARCHAR(20) NOT NULL,
    CUS_GENDER CHAR,
    PRIMARY KEY (CUS_ID)
);

CREATE TABLE CATEGORY (
    CAT_ID INT,
    CAT_NAME VARCHAR(20) NOT NULL,
    PRIMARY KEY (CAT_ID)
);

CREATE TABLE PRODUCT (
    PRO_ID INT,
    PRO_NAME VARCHAR(20) NOT NULL DEFAULT 'Dummy',
    PRO_DESC VARCHAR(60),
    CAT_ID INT,
    PRIMARY KEY (PRO_ID),
    FOREIGN KEY (CAT_ID)
        REFERENCES CATEGORY (CAT_ID)
);

CREATE TABLE SUPPLIER_PRICING (
    PRICING_ID INT,
    PRO_ID INT,
    SUPP_ID INT,
    SUPP_PRICE INT DEFAULT 0,
    PRIMARY KEY (PRICING_ID),
    FOREIGN KEY (PRO_ID)
        REFERENCES PRODUCT (PRO_ID),
    FOREIGN KEY (SUPP_ID)
        REFERENCES SUPPLIER (SUPP_ID)
);

CREATE TABLE `ORDER` (
    ORD_ID INT,
    ORD_AMOUNT INT NOT NULL,
    ORD_DATE DATE NOT NULL,
    CUS_ID INT,
    PRICING_ID INT,
    PRIMARY KEY (ORD_ID),
    FOREIGN KEY (CUS_ID)
        REFERENCES CUSTOMER (CUS_ID),
    FOREIGN KEY (PRICING_ID)
        REFERENCES SUPPLIER_PRICING (PRICING_ID)
);

CREATE TABLE RATING (
    RAT_ID INT,
    ORD_ID INT,
    RAT_RATSTARS INT NOT NULL,
    PRIMARY KEY (RAT_ID),
    FOREIGN KEY (ORD_ID)
        REFERENCES `ORDER` (ORD_ID)
);

INSERT INTO SUPPLIER  VALUES (1, 'Rajesh Retails', 'Delhi', '1234567890');
INSERT INTO SUPPLIER  VALUES (2, 'Appario Ltd.', 'Mumbai', '2589631470');
INSERT INTO SUPPLIER  VALUES (3, 'Knome Products', 'Bangalore', '9785462315');
INSERT INTO SUPPLIER  VALUES (4, 'Bansal Retails', 'Kochi', '8975463285');
INSERT INTO SUPPLIER  VALUES (5, 'Mittal Ltd.', 'Lucknow', '7898456532');

INSERT INTO CUSTOMER  VALUES (1, 'AAKASH', '9999999999', 'DELHI', 'M');
INSERT INTO CUSTOMER  VALUES (2, 'AMAN', '9785463215', 'NOIDA', 'M');
INSERT INTO CUSTOMER  VALUES (3, 'NEHA', '8888888888', 'MUMBAI', 'F');
INSERT INTO CUSTOMER  VALUES (4, 'MEGHA', '5555555555', 'KOLKATA', 'F');
INSERT INTO CUSTOMER  VALUES (5, 'PULKIT', '2222222222', 'LUCKNOW', 'M');

INSERT INTO CATEGORY VALUES (1, 'BOOKS');
INSERT INTO CATEGORY VALUES (2, 'GAMES');
INSERT INTO CATEGORY VALUES (3, 'GROCERIES');
INSERT INTO CATEGORY VALUES (4, 'ELECTRONIC');
INSERT INTO CATEGORY VALUES (5, 'CLOTHS');

INSERT INTO PRODUCT VALUES (1, 'GTA V', 'Windows 7 and abovr with i5 processor and 8GB RAM', 2);
INSERT INTO PRODUCT VALUES (2, 'TSHIRT', 'SIZE-L with Black, Blue and White variations', 5);
INSERT INTO PRODUCT VALUES (3, 'ROG LAPTOP', 'Windows 10 with 15 inch screen, i7 processor, 1TB SSD', 4);
INSERT INTO PRODUCT VALUES (4, 'OATS', 'Highly Nutritious from Nestle', 3);
INSERT INTO PRODUCT VALUES (5, 'HARRY POTTER', 'Best Collection of all time by J.K. Rowling', 1);
INSERT INTO PRODUCT VALUES (6, 'MILK', '1L Toned Milk', 3);
INSERT INTO PRODUCT VALUES (7, 'Boat Earphones', '1.5M long Dolby Atmos', 4);
INSERT INTO PRODUCT VALUES (8, 'Jeans', 'Stretchable Denim Jeans with various sizes and color', 5);
INSERT INTO PRODUCT VALUES (9, 'Project IGI', 'compatible with Windows 7 and above', 2);
INSERT INTO PRODUCT VALUES (10, 'Hoodie', 'Black GUCCI for 13 years and above', 5);
INSERT INTO PRODUCT VALUES (11, 'Righ Dad Poor Dad', 'Written by Robert Kiyosaki', 1);
INSERT INTO PRODUCT VALUES (12, 'Train your Brain', 'By Shireen Stephan', 1);

INSERT INTO SUPPLIER_PRICING VALUES (1, 1, 2, 1500);
INSERT INTO SUPPLIER_PRICING VALUES (2, 3, 5, 30000);
INSERT INTO SUPPLIER_PRICING VALUES (3, 5, 1, 3000);
INSERT INTO SUPPLIER_PRICING VALUES (4, 2, 3, 2500);
INSERT INTO SUPPLIER_PRICING VALUES (5, 4, 1, 1000);
INSERT INTO SUPPLIER_PRICING VALUES (6, 12, 2, 780);
INSERT INTO SUPPLIER_PRICING VALUES (7, 12, 4, 789);
INSERT INTO SUPPLIER_PRICING VALUES (8, 3, 1, 31000);
INSERT INTO SUPPLIER_PRICING VALUES (9, 1, 5, 1450);
INSERT INTO SUPPLIER_PRICING VALUES (10, 4, 2, 999);
INSERT INTO SUPPLIER_PRICING VALUES (11, 7, 3, 549);
INSERT INTO SUPPLIER_PRICING VALUES (12, 7, 4, 529);
INSERT INTO SUPPLIER_PRICING VALUES (13, 6, 2, 105);
INSERT INTO SUPPLIER_PRICING VALUES (14, 6, 1, 99);
INSERT INTO SUPPLIER_PRICING VALUES (15, 2, 5, 2999);
INSERT INTO SUPPLIER_PRICING VALUES (16, 5, 2, 2999);

INSERT INTO `ORDER` VALUES (101, 1500, '2021-10-06', 2, 1);
INSERT INTO `ORDER` VALUES (102, 1000, '2021-10-12', 3, 5);
INSERT INTO `ORDER` VALUES (103, 30000, '2021-09-16', 5, 2);
INSERT INTO `ORDER` VALUES (104, 1500, '2021-10-05', 1, 1);
INSERT INTO `ORDER` VALUES (105, 3000, '2021-08-16', 4, 3);
INSERT INTO `ORDER` VALUES (106, 1450, '2021-08-18', 1, 9);
INSERT INTO `ORDER` VALUES (107, 789, '2021-09-01', 3, 7);
INSERT INTO `ORDER` VALUES (108, 780, '2021-09-07', 5, 6);
INSERT INTO `ORDER` VALUES (109, 3000, '2021-01-10', 5, 3);
INSERT INTO `ORDER` VALUES (110, 2500, '2021-09-10', 2, 4);
INSERT INTO `ORDER` VALUES (111, 1000, '2021-09-15', 4, 5);
INSERT INTO `ORDER` VALUES (112, 789, '2021-09-16', 4, 7);
INSERT INTO `ORDER` VALUES (113, 31000, '2021-09-16', 1, 8);
INSERT INTO `ORDER` VALUES (114, 1000, '2021-09-16', 3, 5);
INSERT INTO `ORDER` VALUES (115, 3000, '2021-09-16', 5, 3);
INSERT INTO `ORDER` VALUES (116, 99, '2021-09-17', 2, 14);

INSERT INTO RATING VALUES (1, 101, 4);
INSERT INTO RATING VALUES (2, 102, 3);
INSERT INTO RATING VALUES (3, 103, 1);
INSERT INTO RATING VALUES (4, 104, 2);
INSERT INTO RATING VALUES (5, 105, 4);
INSERT INTO RATING VALUES (6, 106, 3);
INSERT INTO RATING VALUES (7, 107, 4);
INSERT INTO RATING VALUES (8, 108, 4);
INSERT INTO RATING VALUES (9, 109, 3);
INSERT INTO RATING VALUES (10, 110, 5);
INSERT INTO RATING VALUES (11, 111, 3);
INSERT INTO RATING VALUES (12, 112, 4);
INSERT INTO RATING VALUES (13, 113, 2);
INSERT INTO RATING VALUES (14, 114, 1);
INSERT INTO RATING VALUES (15, 115, 1);
INSERT INTO RATING VALUES (16, 116, 0);

-- Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.

SELECT 
    COUNT(C.CUS_ID) AS COUNT, C.CUS_GENDER
FROM
    `ORDER` ORD
        INNER JOIN
    CUSTOMER C ON C.CUS_ID = ORD.CUS_ID
WHERE
    ORD.ORD_AMOUNT >= 3000
GROUP BY C.CUS_GENDER;

-- Display all the orders along with product name ordered by a customer having Customer_Id=2

SELECT 
    ORD.*, PRD.*
FROM
    `ORDER` ORD
        INNER JOIN
    SUPPLIER_PRICING SP ON SP.PRICING_ID = ORD.PRICING_ID
        INNER JOIN
    PRODUCT PRD ON PRD.PRO_ID = SP.PRO_ID
WHERE
    ORD.CUS_ID = 2;

-- Display the Supplier details who can supply more than one product.

SELECT 
    *
FROM
    SUPPLIER SP
        INNER JOIN
    (SELECT 
        SUPP_ID, COUNT(PRO_ID) AS COUNT
    FROM
        SUPPLIER_PRICING
    GROUP BY SUPP_ID) AS SUP ON SUP.SUPP_ID = SP.SUPP_ID
WHERE
    SUP.COUNT > 1;

-- Find the least expensive product from each category and print the table with category id, name, product name and price of the product-- 

SELECT 
    C.CAT_ID,
    C.CAT_NAME,
    MIN(T1.MINPRICE) AS PRICE_OF_LEAST_EXPENSIVE_PRODUCT
FROM
    CATEGORY C
        INNER JOIN
    (SELECT 
        PRD.CAT_ID, PRD.PRO_NAME, T2.*
    FROM
        PRODUCT PRD
    INNER JOIN (SELECT 
        SP.PRO_ID, MIN(SP.SUPP_PRICE) AS MINPRICE
    FROM
        SUPPLIER_PRICING SP
    GROUP BY SP.PRO_ID) AS T2 ON PRD.PRO_ID = T2.PRO_ID) AS T1 ON T1.CAT_ID = C.CAT_ID
GROUP BY T1.CAT_ID;

-- Display the Id and Name of the Product ordered after “2021-10-05”.

SELECT 
    P.PRO_ID, P.PRO_NAME
FROM
    `ORDER` ORD
        INNER JOIN
    SUPPLIER_PRICING SP ON SP.PRICING_ID = ORD.PRICING_ID
        INNER JOIN
    PRODUCT P ON P.PRO_ID = SP.PRO_ID
WHERE
    ORD.ORD_DATE > '2021-10-05';

-- Display customer name and gender whose names start or end with character 'A'.

SELECT 
    CUS.CUS_NAME, CUS.CUS_GENDER
FROM
    CUSTOMER CUS
WHERE
    CUS.CUS_NAME LIKE 'A%'
        OR CUS.CUS_NAME LIKE '%A';

-- Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.

DELIMITER $$
CREATE PROCEDURE DETAILS()
BEGIN
SELECT 
    REPORT.SUPP_ID,
    REPORT.SUPP_NAME,
    REPORT.RATING,
    CASE
        WHEN REPORT.RATING > 4 THEN 'Genuine Supplier'
        WHEN REPORT.RATING > 2 THEN 'Average Supplier'
        ELSE 'Supplier should not be considered'
    END AS TYPE_OF_SUPPLIER
FROM
    (SELECT 
    S.SUPP_ID, S.SUPP_NAME, V.AVG AS RATING
FROM
    SUPPLIER S
        INNER JOIN
    (SELECT 
        SP.SUPP_ID, AVG(RT.RAT_RATSTARS) AS AVG
    FROM
        `ORDER` ORD
    INNER JOIN RATING RT ON RT.ORD_ID = ORD.ORD_ID
    INNER JOIN SUPPLIER_PRICING SP ON SP.PRICING_ID = ORD.PRICING_ID
    GROUP BY SP.SUPP_ID) AS V ON V.SUPP_ID = S.SUPP_ID) AS REPORT;
END $$

DELIMITER ;

CALL DETAILS();
